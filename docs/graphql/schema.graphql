input AUTH_PROVIDER_CREDENTIALS {
  email: String!
  password: String!
}

input AuthProviderSignupData {
  credentials: AUTH_PROVIDER_CREDENTIALS
}

scalar AuthScalar

type Link {
  description: String!
  id: ID!
  postedBy: User
  url: String!
}

type Mutation {
  createLink(description: String!, url: String!): Link!
  createUser(authProvider: AuthProviderSignupData, name: String!): User!
  signinUser(credentials: AUTH_PROVIDER_CREDENTIALS): SignInUserPayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  """
  Query all Links
  """
  allLinks(description: String = null): [Link!]!
  review(reviewId: Int!): Review!

  """
  select reviews
  """
  reviews(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReviewConnection
}

type Review {
  body: AuthScalar
  id: ID!
  title: String
}

"""
The connection type for Review.
"""
type ReviewConnection {
  """
  A list of edges.
  """
  edges: [ReviewEdge]

  """
  A list of nodes.
  """
  nodes: [Review]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ReviewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Review
}

"""
Autogenerated return type of SignInUser
"""
type SignInUserPayload {
  token: String
  user: User
}

type User {
  email: String!
  id: ID!
  name: String!
}